{"version":3,"sources":["components/StartScreen/StartScreen.js","App.js","index.js"],"names":["StartScreen","props","className","onClick","startGame","App","useState","isReady","setIsReady","questions","setQuestions","isCheckingAnswer","setIsCheckingAnswers","score","setScore","getQuestions","fetch","then","res","json","data","questionData","results","map","question","difficulty","category","id","nanoid","answers","incorrect_answers","answer","isCorrect","isSelected","correct_answer","sort","Math","random","useEffect","quizQuestions","questionContainer","checkingAnswerStyles","backgroundColor","border","opacity","normalStyles","answerId","questionId","prevQuestions","answerObj","style","quizButton","questionsAnswered","forEach","alert","prevScore","quiz","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2614b0ca.chunk.js","sourcesContent":["const StartScreen = (props) => {\r\n  return (\r\n    <div className=\"start-screen\">\r\n      <h1 className=\"quiz-title\">Quizzical</h1>\r\n      <p className=\"quiz-description\">A simple general knowledge trivia game</p>\r\n      <button className=\"start-quiz-button\" onClick={props.startGame}>\r\n        Start Game\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StartScreen;\r\n","import \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport StartScreen from \"./components/StartScreen/StartScreen\";\nimport { nanoid } from \"nanoid\";\n\nfunction App() {\n  const [isReady, setIsReady] = useState(false);\n  const [questions, setQuestions] = useState([]);\n  const [isCheckingAnswer, setIsCheckingAnswers] = useState(false);\n  const [score, setScore] = useState(0);\n\n  useEffect(() => {\n    getQuestions();\n  }, []);\n\n  function getQuestions() {\n    fetch(\n      \"https://opentdb.com/api.php?amount=5&category=9&difficulty=easy&type=multiple\"\n    )\n      .then((res) => res.json())\n      .then((data) => {\n        const questionData = data.results.map((question) => {\n          return {\n            question: question.question,\n            difficulty: question.difficulty,\n            category: question.category,\n            id: nanoid(),\n            answers: [\n              ...question.incorrect_answers.map((answer) => ({\n                answer: answer,\n                isCorrect: false,\n                isSelected: false,\n                id: nanoid(),\n              })),\n              {\n                answer: question.correct_answer,\n                isCorrect: true,\n                isSelected: false,\n                id: nanoid(),\n              },\n            ].sort(() => Math.random() - 0.5),\n          };\n        });\n        setQuestions(questionData);\n      });\n  }\n\n  function startGame() {\n    setIsReady(true);\n  }\n\n  function toggleSelected(answerId, questionId) {\n    setQuestions((prevQuestions) =>\n      prevQuestions.map((question) => {\n        return {\n          ...question,\n          answers: question.answers.map((answerObj) => {\n            if (answerObj.id === answerId) {\n              return { ...answerObj, isSelected: !answerObj.isSelected };\n            } else if (\n              answerObj.id !== answerId &&\n              question.id === questionId\n            ) {\n              return { ...answerObj, isSelected: false };\n            } else {\n              return answerObj;\n            }\n          }),\n        };\n      })\n    );\n  }\n\n  function restartGame() {\n    getQuestions();\n    setIsCheckingAnswers(false);\n    setScore(0);\n  }\n\n  function calculateScore() {\n    // check if all questions are answered\n    let questionsAnswered = 0;\n    questions.forEach((question) => {\n      question.answers.forEach((answer) => {\n        if (answer.isSelected) questionsAnswered++;\n      });\n    });\n\n    if (questionsAnswered !== 5) {\n      alert(\"Please answer all the questions to check answers\");\n    } else {\n      setIsCheckingAnswers(true);\n      questions.forEach((question) => {\n        question.answers.forEach((answer) => {\n          if (answer.isSelected && answer.isCorrect)\n            setScore((prevScore) => prevScore + 1);\n        });\n      });\n    }\n  }\n\n  let quizQuestions = questions.map((questionContainer) => {\n    const answers = [...questionContainer.answers];\n    return (\n      <div key={nanoid()} className=\"question-container\">\n        <div className=\"question\">{questionContainer.question}</div>\n        <div className=\"answers\">\n          {answers.map((answer) => {\n            const checkingAnswerStyles = {\n              backgroundColor:\n                answer.isSelected && answer.isCorrect\n                  ? \"#94d7a2\"\n                  : answer.isSelected && !answer.isCorrect\n                  ? \"#f8bcbc\"\n                  : !answer.isSelected && answer.isCorrect\n                  ? \"#94d7a2\"\n                  : \"none\",\n              border:\n                answer.isSelected && answer.isCorrect\n                  ? \"0.8px solid #94d7a2\"\n                  : answer.isSelected && !answer.isCorrect\n                  ? \"0.8px solid #f8bcbc\"\n                  : !answer.isSelected && answer.isCorrect\n                  ? \"#94d7a2\"\n                  : \"0.8px solid #4d5b9e\",\n              opacity: !answer.isSelected && !answer.isCorrect ? \"0.5\" : \"1\",\n            };\n            const normalStyles = {\n              backgroundColor: answer.isSelected\n                ? \"hsl(230, 61%, 90%)\"\n                : \"none\",\n              border: answer.isSelected\n                ? \"0.8px solid hsl(230, 61%, 90%)\"\n                : \"0.8px solid #4d5b9e\",\n            };\n            return (\n              <div\n                key={nanoid()}\n                className=\"answer\"\n                onClick={() => toggleSelected(answer.id, questionContainer.id)}\n                style={isCheckingAnswer ? checkingAnswerStyles : normalStyles}\n              >\n                {answer.answer}\n              </div>\n            );\n          })}\n        </div>\n        <hr className=\"question-divider\" />\n      </div>\n    );\n  });\n\n  let quizButton = isCheckingAnswer ? (\n    <div className=\"quiz-button-section\">\n      <p className=\"quiz-score\">You scored {score}/5 correct answers</p>\n      <button className=\"quiz-button\" onClick={restartGame}>\n        Play again\n      </button>\n    </div>\n  ) : (\n    <div className=\"quiz-button-section\">\n      <button className=\"quiz-button\" onClick={calculateScore}>\n        Check answer\n      </button>\n    </div>\n  );\n\n  let quiz = (\n    <>\n      {quizQuestions}\n      {quizButton}\n    </>\n  );\n  return <>{isReady ? quiz : <StartScreen startGame={startGame} />}</>;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}