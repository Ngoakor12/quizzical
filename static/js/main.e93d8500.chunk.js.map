{"version":3,"sources":["components/StartScreen/StartScreen.js","App.js","index.js"],"names":["StartScreen","props","className","onClick","startGame","App","useState","isReady","setIsReady","questions","setQuestions","isCompleted","setIsCompleted","getQuestions","fetch","then","res","json","data","questionData","results","map","question","id","nanoid","incorrect_answers","answer","isSelected","correct_answer","useEffect","console","log","quizQuestions","questionContainer","answers","prevQuestions","answerObj","style","backgroundColor","border","quizButton","prevIsCompleted","quiz","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2MAYeA,EAZK,SAACC,GACnB,OACE,sBAAKC,UAAU,eAAf,UACE,oBAAIA,UAAU,aAAd,uBACA,mBAAGA,UAAU,mBAAb,oDACA,wBAAQA,UAAU,oBAAoBC,QAASF,EAAMG,UAArD,4B,OCmHSC,MAnHf,WACE,MAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAkCF,mBAAS,IAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAsCJ,oBAAS,GAA/C,mBAAOK,EAAP,KAAoBC,EAApB,KAMA,SAASC,IACPC,MACE,iFAECC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACL,IAAMC,EAAeD,EAAKE,QAAQC,KAAI,SAACC,GACrC,OAAO,2BACFA,GADL,IAEEC,GAAIC,cACJC,kBAAkB,GAAD,mBACZH,EAASG,kBAAkBJ,KAAI,SAACK,GAAD,MAAa,CAC7CA,OAAQA,EACRC,YAAY,EACZJ,GAAIC,mBAJS,CAMf,CACEE,OAAQJ,EAASM,eACjBD,YAAY,EACZJ,GAAIC,sBAKZd,EAAaS,MA5BnBU,qBAAU,WACRhB,MACC,IA8BHiB,QAAQC,IAAItB,GAsBZ,IAAIuB,EAAgBvB,EAAUY,KAAI,SAACY,GACjC,IAAMC,EAAO,YAAOD,EAAkBR,mBACtC,OACE,sBAAoBvB,UAAU,qBAA9B,UACE,qBAAKA,UAAU,WAAf,SAA2B+B,EAAkBX,WAC7C,qBAAKpB,UAAU,UAAf,SACGgC,EAAQb,KAAI,SAACK,GAAD,OACX,qBAEExB,UAAU,SACVC,QAAS,kBA1BGoB,EA0BkBG,EAAOH,QAxB/Cb,GAAa,SAACyB,GAAD,OACXA,EAAcd,KAAI,SAACC,GAAD,mBAAC,eACdA,GADa,IAEhBG,kBAAmBH,EAASG,kBAAkBJ,KAAI,SAACe,GACjD,OAAIA,EAAUb,KAAOA,EACZ,2BAAKa,GAAZ,IAAuBT,YAAaS,EAAUT,aAEvCS,aATjB,IAAwBb,GA2BZc,MAAO,CACLC,gBAAiBZ,EAAOC,WACpB,qBACA,OACJY,OAAQb,EAAOC,WACX,sCACA,4BAVR,SAaGD,EAAOA,QAZHF,oBAgBX,oBAAItB,UAAU,uBArBNsB,kBA+BVgB,EAAa7B,EACf,sBAAKT,UAAU,sBAAf,UACE,mBAAGA,UAAU,aAAb,4CACA,wBAAQA,UAAU,cAAcC,QARpC,WACEU,IACAD,GAAe,SAAC6B,GAAD,OAAsBA,MAMnC,2BAKF,qBAAKvC,UAAU,sBAAf,SACE,wBAAQA,UAAU,cAAlB,4BAIAwC,EACF,qCACGV,EACAQ,KAGL,OAAO,mCAAGjC,EAAUmC,EAAO,cAAC,EAAD,CAAatC,UAzExC,WACEI,GAAW,SCzCfmC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e93d8500.chunk.js","sourcesContent":["const StartScreen = (props) => {\r\n  return (\r\n    <div className=\"start-screen\">\r\n      <h1 className=\"quiz-title\">Quizzical</h1>\r\n      <p className=\"quiz-description\">A simple general knowledge trivia game</p>\r\n      <button className=\"start-quiz-button\" onClick={props.startGame}>\r\n        Start Game\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StartScreen;\r\n","import \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport StartScreen from \"./components/StartScreen/StartScreen\";\nimport { nanoid } from \"nanoid\";\n\nfunction App() {\n  const [isReady, setIsReady] = useState(false);\n  const [questions, setQuestions] = useState([]);\n  const [isCompleted, setIsCompleted] = useState(true);\n\n  useEffect(() => {\n    getQuestions();\n  }, []);\n\n  function getQuestions() {\n    fetch(\n      \"https://opentdb.com/api.php?amount=5&category=9&difficulty=easy&type=multiple\"\n    )\n      .then((res) => res.json())\n      .then((data) => {\n        const questionData = data.results.map((question) => {\n          return {\n            ...question,\n            id: nanoid(),\n            incorrect_answers: [\n              ...question.incorrect_answers.map((answer) => ({\n                answer: answer,\n                isSelected: false,\n                id: nanoid(),\n              })),\n              {\n                answer: question.correct_answer,\n                isSelected: false,\n                id: nanoid(),\n              },\n            ],\n          };\n        });\n        setQuestions(questionData);\n      });\n  }\n\n  console.log(questions);\n\n  function startGame() {\n    setIsReady(true);\n  }\n\n  function toggleSelected(id) {\n    // console.log(\"clicked\", id);\n    setQuestions((prevQuestions) =>\n      prevQuestions.map((question) => ({\n        ...question,\n        incorrect_answers: question.incorrect_answers.map((answerObj) => {\n          if (answerObj.id === id) {\n            return { ...answerObj, isSelected: !answerObj.isSelected };\n          } else {\n            return answerObj;\n          }\n        }),\n      }))\n    );\n  }\n\n  let quizQuestions = questions.map((questionContainer) => {\n    const answers = [...questionContainer.incorrect_answers];\n    return (\n      <div key={nanoid()} className=\"question-container\">\n        <div className=\"question\">{questionContainer.question}</div>\n        <div className=\"answers\">\n          {answers.map((answer) => (\n            <div\n              key={nanoid()}\n              className=\"answer\"\n              onClick={() => toggleSelected(answer.id)}\n              style={{\n                backgroundColor: answer.isSelected\n                  ? \"hsl(230, 61%, 90%)\"\n                  : \"none\",\n                border: answer.isSelected\n                  ? \"0.794239px solid hsl(230, 61%, 90%)\"\n                  : \"0.794239px solid #4d5b9e\",\n              }}\n            >\n              {answer.answer}\n            </div>\n          ))}\n        </div>\n        <hr className=\"question-divider\" />\n      </div>\n    );\n  });\n\n  function restartGame() {\n    getQuestions();\n    setIsCompleted((prevIsCompleted) => !prevIsCompleted);\n  }\n\n  let quizButton = isCompleted ? (\n    <div className=\"quiz-button-section\">\n      <p className=\"quiz-score\">You scored 5/5 correct answers</p>\n      <button className=\"quiz-button\" onClick={restartGame}>\n        Play again\n      </button>\n    </div>\n  ) : (\n    <div className=\"quiz-button-section\">\n      <button className=\"quiz-button\">Check answer</button>\n    </div>\n  );\n\n  let quiz = (\n    <>\n      {quizQuestions}\n      {quizButton}\n    </>\n  );\n  return <>{isReady ? quiz : <StartScreen startGame={startGame} />}</>;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}