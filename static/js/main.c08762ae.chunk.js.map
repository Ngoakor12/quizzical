{"version":3,"sources":["components/StartScreen/StartScreen.js","components/Question/Question.js","components/Answer/Answer.js","components/Quiz/Quiz.js","App.js","index.js"],"names":["StartScreen","props","className","onClick","startGame","Question","question","Answer","checkingAnswerStyles","backgroundColor","answer","isSelected","isCorrect","border","opacity","normalStyles","toggleSelected","style","isCheckingAnswer","Quiz","useState","questions","setQuestions","setIsCheckingAnswers","score","setScore","getQuestions","url","fetch","then","res","json","data","questionData","results","map","difficulty","category","id","nanoid","answers","incorrect_answers","correct_answer","sort","Math","random","useEffect","quizQuestions","questionContainer","answerId","questionId","prevQuestions","answerObj","quizButtonSection","questionsAnswered","forEach","alert","prevScore","App","isReady","setIsReady","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c08762ae.chunk.js","sourcesContent":["const StartScreen = (props) => {\r\n  return (\r\n    <div className=\"start-screen\">\r\n      <h1 className=\"quiz-title\">Quizzical</h1>\r\n      <p className=\"quiz-description\">A simple general knowledge trivia game</p>\r\n      <button className=\"start-quiz-button\" onClick={props.startGame}>\r\n        Start Game\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StartScreen;\r\n","const Question = (props) => {\r\n  return <div className=\"question\">{props.question}</div>;\r\n};\r\n\r\nexport default Question;\r\n","const Answer = (props) => {\r\n  const checkingAnswerStyles = {\r\n    backgroundColor:\r\n      props.answer.isSelected && props.answer.isCorrect\r\n        ? \"#94d7a2\"\r\n        : props.answer.isSelected && !props.answer.isCorrect\r\n        ? \"#f8bcbc\"\r\n        : !props.answer.isSelected && props.answer.isCorrect\r\n        ? \"#94d7a2\"\r\n        : \"none\",\r\n    border:\r\n      props.answer.isSelected && props.answer.isCorrect\r\n        ? \"0.8px solid #94d7a2\"\r\n        : props.answer.isSelected && !props.answer.isCorrect\r\n        ? \"0.8px solid #f8bcbc\"\r\n        : !props.answer.isSelected && props.answer.isCorrect\r\n        ? \"#94d7a2\"\r\n        : \"0.8px solid #4d5b9e\",\r\n    opacity: !props.answer.isSelected && !props.answer.isCorrect ? \"0.5\" : \"1\",\r\n  };\r\n\r\n  const normalStyles = {\r\n    backgroundColor: props.answer.isSelected ? \"hsl(230, 61%, 90%)\" : \"none\",\r\n    border: props.answer.isSelected\r\n      ? \"0.8px solid hsl(230, 61%, 90%)\"\r\n      : \"0.8px solid #4d5b9e\",\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"answer\"\r\n      onClick={props.toggleSelected}\r\n      style={props.isCheckingAnswer ? checkingAnswerStyles : normalStyles}\r\n    >\r\n      {props.answer.answer}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Answer;\r\n","import { nanoid } from \"nanoid\";\r\nimport { useState, useEffect } from \"react\";\r\nimport Question from \"../Question/Question\";\r\nimport Answer from \"../Answer/Answer\";\r\n\r\nfunction Quiz() {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [isCheckingAnswer, setIsCheckingAnswers] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n\r\n  useEffect(() => {\r\n    getQuestions(\r\n      \"https://opentdb.com/api.php?amount=5&category=9&type=multiple\"\r\n    );\r\n  }, []);\r\n\r\n  function getQuestions(url) {\r\n    fetch(url)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        const questionData = data.results.map((question) => {\r\n          return {\r\n            question: question.question,\r\n            difficulty: question.difficulty,\r\n            category: question.category,\r\n            id: nanoid(),\r\n            answers: [\r\n              ...question.incorrect_answers.map((answer) => ({\r\n                answer: answer,\r\n                isCorrect: false,\r\n                isSelected: false,\r\n                id: nanoid(),\r\n              })),\r\n              {\r\n                answer: question.correct_answer,\r\n                isCorrect: true,\r\n                isSelected: false,\r\n                id: nanoid(),\r\n              },\r\n            ].sort(() => Math.random() - 0.5),\r\n          };\r\n        });\r\n        setQuestions(questionData);\r\n      });\r\n  }\r\n\r\n  function toggleSelected(answerId, questionId) {\r\n    setQuestions((prevQuestions) =>\r\n      prevQuestions.map((question) => {\r\n        return {\r\n          ...question,\r\n          answers: question.answers.map((answerObj) => {\r\n            if (answerObj.id === answerId) {\r\n              return { ...answerObj, isSelected: !answerObj.isSelected };\r\n            } else if (\r\n              answerObj.id !== answerId &&\r\n              question.id === questionId\r\n            ) {\r\n              return { ...answerObj, isSelected: false };\r\n            } else {\r\n              return answerObj;\r\n            }\r\n          }),\r\n        };\r\n      })\r\n    );\r\n  }\r\n\r\n  function restartGame() {\r\n    getQuestions(\r\n      \"https://opentdb.com/api.php?amount=5&category=9&type=multiple\"\r\n    );\r\n    setIsCheckingAnswers(false);\r\n    setScore(0);\r\n  }\r\n\r\n  function calculateScore() {\r\n    // check if all questions are answered\r\n    let questionsAnswered = 0;\r\n    questions.forEach((question) => {\r\n      question.answers.forEach((answer) => {\r\n        if (answer.isSelected) questionsAnswered++;\r\n      });\r\n    });\r\n\r\n    if (questionsAnswered !== 5) {\r\n      alert(\"Please answer all the questions to check answers\");\r\n    } else {\r\n      setIsCheckingAnswers(true);\r\n      questions.forEach((question) => {\r\n        question.answers.forEach((answer) => {\r\n          if (answer.isSelected && answer.isCorrect)\r\n            setScore((prevScore) => prevScore + 1);\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  const quizQuestions = questions.map((questionContainer) => {\r\n    const answers = [...questionContainer.answers];\r\n    return (\r\n      <div key={nanoid()} className=\"question-container\">\r\n        <Question key={nanoid()} question={questionContainer.question} />\r\n        <div key={nanoid()} className=\"answers\">\r\n          {answers.map((answer) => {\r\n            return (\r\n              <Answer\r\n                key={nanoid()}\r\n                answer={answer}\r\n                question={questionContainer}\r\n                isCheckingAnswer={isCheckingAnswer}\r\n                toggleSelected={() =>\r\n                  toggleSelected(answer.id, questionContainer.id)\r\n                }\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n        <hr className=\"question-divider\" />\r\n      </div>\r\n    );\r\n  });\r\n\r\n  const quizButtonSection = isCheckingAnswer ? (\r\n    <div className=\"quiz-button-section\">\r\n      <p className=\"quiz-score\">You scored {score}/5 correct answers</p>\r\n      <button className=\"quiz-button\" onClick={restartGame}>\r\n        Play again\r\n      </button>\r\n    </div>\r\n  ) : (\r\n    <div className=\"quiz-button-section\">\r\n      <button className=\"quiz-button\" onClick={calculateScore}>\r\n        Check answer\r\n      </button>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {quizQuestions}\r\n      {quizButtonSection}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Quiz;\r\n","import \"./App.css\";\nimport { useState } from \"react\";\nimport StartScreen from \"./components/StartScreen/StartScreen\";\nimport Quiz from \"./components/Quiz/Quiz\";\n\nfunction App() {\n  const [isReady, setIsReady] = useState(false);\n\n  function startGame() {\n    setIsReady(true);\n  }\n\n  return <>{isReady ? <Quiz /> : <StartScreen startGame={startGame} />}</>;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}