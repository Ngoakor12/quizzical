{"version":3,"sources":["components/Footer/Footer.js","components/Form/Form.js","components/StartScreen/StartScreen.js","components/Question/Question.js","components/Answer/Answer.js","components/Quiz/Quiz.js","App.js","index.js"],"names":["Footer","href","Form","props","id","className","htmlFor","name","onChange","handleFormChange","map","category","value","difficulty","StartScreen","form","onClick","startGame","Question","question","Answer","checkingAnswerStyles","backgroundColor","answer","isSelected","isCorrect","border","opacity","normalStyles","toggleSelected","style","isCheckingAnswer","Quiz","quizQuestions","questions","questionContainer","answers","nanoid","answerId","questionId","setQuestions","prevQuestions","answerObj","quizButtonSection","score","getQuestions","error","console","message","setIsCheckingAnswer","setScore","questionsAnswered","forEach","alert","prevScore","App","useState","setForm","isReady","setIsReady","url","fetch","then","res","json","data","questionData","results","base64ToUTF8","incorrect_answers","correct_answer","sort","Math","random","str","decodeURIComponent","escape","window","atob","e","target","prevform","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1cd2e2df.chunk.js","sourcesContent":["const Footer = () => {\r\n  return (\r\n    <footer>\r\n      <p>\r\n        Developed by <a href=\"https://www.ngoako.com\">Ngoako</a>\r\n      </p>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","const Form = (props) => {\r\n  const triviaCategories = [\r\n    { id: 9, name: \"General Knowledge\" },\r\n    { id: 10, name: \"Entertainment: Books\" },\r\n    { id: 11, name: \"Entertainment: Film\" },\r\n    { id: 12, name: \"Entertainment: Music\" },\r\n    { id: 13, name: \"Entertainment: Musicals & Theatres\" },\r\n    { id: 14, name: \"Entertainment: Television\" },\r\n    { id: 15, name: \"Entertainment: Video Games\" },\r\n    { id: 16, name: \"Entertainment: Board Games\" },\r\n    { id: 17, name: \"Science & Nature\" },\r\n    { id: 18, name: \"Science: Computers\" },\r\n    { id: 19, name: \"Science: Mathematics\" },\r\n    { id: 20, name: \"Mythology\" },\r\n    { id: 21, name: \"Sports\" },\r\n    { id: 22, name: \"Geography\" },\r\n    { id: 23, name: \"History\" },\r\n    { id: 24, name: \"Politics\" },\r\n    { id: 25, name: \"Art\" },\r\n    { id: 26, name: \"Celebrities\" },\r\n    { id: 27, name: \"Animals\" },\r\n    { id: 28, name: \"Vehicles\" },\r\n    { id: 29, name: \"Entertainment: Comics\" },\r\n    { id: 30, name: \"Science: Gadgets\" },\r\n    { id: 31, name: \"Entertainment: Japanese Anime & Manga\" },\r\n    { id: 32, name: \"Entertainment: Cartoon & Animations\" },\r\n  ];\r\n\r\n  const difficulties = [\r\n    { name: \"Easy\", value: \"easy\" },\r\n    { name: \"Medium\", value: \"medium\" },\r\n    { name: \"Hard\", value: \"hard\" },\r\n  ];\r\n\r\n  return (\r\n    <form id=\"custom-game-form\">\r\n      <div className=\"custom-game-dropdown\">\r\n        <label htmlFor=\"category\">Category </label>\r\n        <select name=\"category\" id=\"category\" onChange={props.handleFormChange}>\r\n          {triviaCategories.map((category) => (\r\n            <option key={category.id} value={category.id}>\r\n              {category.name}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      <div className=\"custom-game-dropdown\">\r\n        <label htmlFor=\"difficulty\">Difficulty </label>\r\n        <select\r\n          name=\"difficulty\"\r\n          id=\"difficulty\"\r\n          onChange={props.handleFormChange}\r\n        >\r\n          {difficulties.map((difficulty) => (\r\n            <option key={difficulty.name} value={difficulty.value}>\r\n              {difficulty.name}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import Footer from \"../Footer/Footer\";\r\nimport Form from \"../Form/Form\";\r\nconst StartScreen = (props) => {\r\n  return (\r\n    <div className=\"start-screen\">\r\n      <header className=\"startscreen-header\">\r\n        <h1 className=\"quiz-title\">Quizzical</h1>\r\n        <p className=\"quiz-description\">\r\n          A trivia game for learning and testing yourself on different topics\r\n        </p>\r\n      </header>\r\n      <div className=\"game-controls\">\r\n        <Form handleFormChange={props.handleFormChange} form={props.form} />\r\n        <button className=\"start-quiz-button\" onClick={props.startGame}>\r\n          Start Game\r\n        </button>\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StartScreen;\r\n","const Question = (props) => {\r\n  return <div className=\"question\">{props.question}</div>;\r\n};\r\n\r\nexport default Question;\r\n","const Answer = (props) => {\r\n  const checkingAnswerStyles = {\r\n    backgroundColor:\r\n      props.answer.isSelected && props.answer.isCorrect\r\n        ? \"#94d7a2\"\r\n        : props.answer.isSelected && !props.answer.isCorrect\r\n        ? \"#f8bcbc\"\r\n        : !props.answer.isSelected && props.answer.isCorrect\r\n        ? \"#94d7a2\"\r\n        : \"none\",\r\n    border:\r\n      props.answer.isSelected && props.answer.isCorrect\r\n        ? \"0.8px solid #94d7a2\"\r\n        : props.answer.isSelected && !props.answer.isCorrect\r\n        ? \"0.8px solid #f8bcbc\"\r\n        : !props.answer.isSelected && props.answer.isCorrect\r\n        ? \"#94d7a2\"\r\n        : \"0.8px solid #4d5b9e\",\r\n    opacity: !props.answer.isSelected && !props.answer.isCorrect ? \"0.5\" : \"1\",\r\n  };\r\n\r\n  const normalStyles = {\r\n    backgroundColor: props.answer.isSelected ? \"hsl(230, 61%, 90%)\" : \"none\",\r\n    border: props.answer.isSelected\r\n      ? \"0.8px solid hsl(230, 61%, 90%)\"\r\n      : \"0.8px solid #4d5b9e\",\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"answer\"\r\n      onClick={props.toggleSelected}\r\n      style={props.isCheckingAnswer ? checkingAnswerStyles : normalStyles}\r\n    >\r\n      {props.answer.answer}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Answer;\r\n","import { nanoid } from \"nanoid\";\r\nimport Question from \"../Question/Question\";\r\nimport Answer from \"../Answer/Answer\";\r\nimport Footer from \"../Footer/Footer\";\r\n\r\nfunction Quiz(props) {\r\n  const { difficulty, category } = props.form;\r\n\r\n  function toggleSelected(answerId, questionId) {\r\n    props.setQuestions((prevQuestions) =>\r\n      prevQuestions.map((question) => {\r\n        return {\r\n          ...question,\r\n          answers: question.answers.map((answerObj) => {\r\n            if (answerObj.id === answerId) {\r\n              return { ...answerObj, isSelected: !answerObj.isSelected };\r\n            } else if (\r\n              answerObj.id !== answerId &&\r\n              question.id === questionId\r\n            ) {\r\n              return { ...answerObj, isSelected: false };\r\n            } else {\r\n              return answerObj;\r\n            }\r\n          }),\r\n        };\r\n      })\r\n    );\r\n  }\r\n\r\n  function restartGame() {\r\n    try {\r\n      props.getQuestions(\r\n        `https://opentdb.com/api.php?amount=5&category=${category}&difficulty=${difficulty}&type=multiple&encode=base64`\r\n      );\r\n    } catch (error) {\r\n      console.error(error.message);\r\n    }\r\n    props.setIsCheckingAnswer(false);\r\n    props.setScore(0);\r\n  }\r\n\r\n  function calculateScore() {\r\n    // check if all questions are answered\r\n    let questionsAnswered = 0;\r\n    props.questions.forEach((question) => {\r\n      question.answers.forEach((answer) => {\r\n        if (answer.isSelected) questionsAnswered++;\r\n      });\r\n    });\r\n\r\n    if (questionsAnswered !== 5) {\r\n      alert(\"Please answer all the questions to check answers\");\r\n    } else {\r\n      props.setIsCheckingAnswer(true);\r\n      props.questions.forEach((question) => {\r\n        question.answers.forEach((answer) => {\r\n          if (answer.isSelected && answer.isCorrect)\r\n            props.setScore((prevScore) => prevScore + 1);\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  const quizQuestions = props.questions.map((questionContainer) => {\r\n    const answers = [...questionContainer.answers];\r\n    return (\r\n      <div key={nanoid()} className=\"question-container\">\r\n        <Question key={nanoid()} question={questionContainer.question} />\r\n        <div key={nanoid()} className=\"answers\">\r\n          {answers.map((answer) => {\r\n            return (\r\n              <Answer\r\n                key={nanoid()}\r\n                answer={answer}\r\n                question={questionContainer}\r\n                isCheckingAnswer={props.isCheckingAnswer}\r\n                toggleSelected={() =>\r\n                  toggleSelected(answer.id, questionContainer.id)\r\n                }\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n        <hr className=\"question-divider\" />\r\n      </div>\r\n    );\r\n  });\r\n\r\n  const quizButtonSection = props.isCheckingAnswer ? (\r\n    <div className=\"quiz-button-section\">\r\n      <p className=\"quiz-score\">You scored {props.score}/5 correct answers</p>\r\n      <button className=\"quiz-button\" onClick={restartGame}>\r\n        Play again\r\n      </button>\r\n    </div>\r\n  ) : (\r\n    <div className=\"quiz-button-section\">\r\n      <button className=\"quiz-button\" onClick={calculateScore}>\r\n        Check answer\r\n      </button>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {quizQuestions}\r\n      {quizButtonSection}\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Quiz;\r\n","import \"./App.css\";\r\nimport { useState } from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\nimport StartScreen from \"./components/StartScreen/StartScreen\";\r\nimport Quiz from \"./components/Quiz/Quiz\";\r\n\r\nfunction App() {\r\n  const [form, setForm] = useState({\r\n    difficulty: \"easy\",\r\n    category: 9,\r\n  });\r\n  const [isReady, setIsReady] = useState(false);\r\n  const [questions, setQuestions] = useState([]);\r\n  const [isCheckingAnswer, setIsCheckingAnswer] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n\r\n  function getQuestions(url) {\r\n    fetch(url)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        const questionData = data.results.map((question) => {\r\n          return {\r\n            question: base64ToUTF8(question.question),\r\n            difficulty: question.difficulty,\r\n            category: question.category,\r\n            id: nanoid(),\r\n            answers: [\r\n              ...question.incorrect_answers.map((answer) => ({\r\n                answer: base64ToUTF8(answer),\r\n                isCorrect: false,\r\n                isSelected: false,\r\n                id: nanoid(),\r\n              })),\r\n              {\r\n                answer: base64ToUTF8(question.correct_answer),\r\n                isCorrect: true,\r\n                isSelected: false,\r\n                id: nanoid(),\r\n              },\r\n            ].sort(() => Math.random() - 0.5),\r\n          };\r\n        });\r\n        setQuestions(questionData);\r\n      });\r\n  }\r\n\r\n  // - This function fixes the issue of not rendering html entities correctly.\r\n  // - The data has to be encoded as base64 in the api url(e.g. &encode=base64).\r\n  function base64ToUTF8(str) {\r\n    return decodeURIComponent(escape(window.atob(str)));\r\n  }\r\n\r\n  function handleFormChange(e) {\r\n    const { name, value } = e.target;\r\n    setForm((prevform) => ({\r\n      ...prevform,\r\n      [name]: value,\r\n    }));\r\n  }\r\n\r\n  function startGame() {\r\n    try {\r\n      getQuestions(\r\n        `https://opentdb.com/api.php?amount=5&category=${form.category}&difficulty=${form.difficulty}&type=multiple&encode=base64`\r\n      );\r\n    } catch (error) {\r\n      console.error(error.message);\r\n    }\r\n    setIsReady(true);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {isReady ? (\r\n        <Quiz\r\n          questions={questions}\r\n          setQuestions={setQuestions}\r\n          isCheckingAnswer={isCheckingAnswer}\r\n          setIsCheckingAnswer={setIsCheckingAnswer}\r\n          score={score}\r\n          setScore={setScore}\r\n          getQuestions={getQuestions}\r\n          form={form}\r\n          setForm={setForm}\r\n        />\r\n      ) : (\r\n        <StartScreen\r\n          startGame={startGame}\r\n          handleFormChange={handleFormChange}\r\n          form={form}\r\n          isReady={isReady}\r\n          setIsReady={setIsReady}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}